@startuml deception_db_generator
start
:Clone the repo;
note right: The submodules llama and llama.cpp must also be cloned
:compile llama.cpp;
note right: Use the instructions on the README of llama.cpp
:Download the Llama model;
note right
  Requires free access token from Meta and download.sh in the llama repo.
  Choose between 7B, 13B and 70B (at least 13B suggested)
end note
partition "0-init-llama.sh" {
    :Convert the model;
    note right: Convert to .gguf and quantize to fit in RAM
}
:Save the DB schema in schema.sql; <<input>>
partition "1-build-base-image.sh" {
    :Build the base image;
    note right: Uses Dockerfile and "docker-compose build"
}
:base image; <<output>>
note right
    Image with only the schema packaged.
    Default tag is: registry.gitlab.com/dsantini/deception-db-generator:latest-base .
    Can be customized with OUT_IMAGE_NAME and OUT_IMAGE_TAG.
end note
partition "2-create-initdb.sh" {
    :Start from scratch a container based on the base image;
    note right: On startup the DB will be initialized with the schema
    :Run create-initdb.py to generate the data wwith llama.cpp;
    :Dump the content of the DB to create the initialization script;
}
:initdb.sql.gz; <<output>>
partition "3-build-full-image.sh" {
    :Build the base image;
    note right: Uses Dockerfile and "docker buildx bake" for multi-arch
}
:full image; <<output>>
note right
    Image with the sql.gz backup packaged.
    No default tag to prevent easy identification.
    Must be customized with OUT_IMAGE_NAME and OUT_IMAGE_TAG.
end note
partition "3-build-full-image.sh" {
    :Start the full Docker image ;
}

stop
@enduml